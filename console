#!/usr/bin/env php
<?php
require __DIR__.'/vendor/autoload.php';

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Question\ConfirmationQuestion;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Process\Process;


class CompressCommand extends Command {

    protected function configure() {
        $this
            ->setName('compress')
            ->setDescription('Allow to compress a folder of video')
            ->addArgument('source', InputArgument::REQUIRED, 'Source folder')
            ->addArgument('destination', InputArgument::REQUIRED, 'Destination folder')
            ->addOption('auto-increment', null, InputOption::VALUE_NONE, 'Automatically fix the destination filename in case of collision')
            ->addOption('preset', null, InputOption::VALUE_REQUIRED, 'HandBrake Preset to use', 'Very Fast 720p30')
        ;
    }

    protected function getNameAndDestinationPath($time, $folder){
        $name = date('Y-m-d H.i.s', $time) . '.mp4';
        $path = $folder.DIRECTORY_SEPARATOR.$name;
        return [$name, $path];
    }

    protected function execute(InputInterface $input, OutputInterface $output) {

        $formatter = $this->getHelper('formatter');
        $questioner = $this->getHelper('question');
        $autoFix = $input->getOption('auto-increment');

        // Title
        $source = $input->getArgument('source');
        $destFolder = $input->getArgument('destination');
        $output->writeln($formatter->formatBlock(
            "Video compression from $source to $destFolder", 'question', true
        ));

        // Destination creation if missing
        if (!file_exists($destFolder)){
            $question = new ConfirmationQuestion(
                "<comment>Destination [$destFolder] doesn't exist. Do you want to create it?</comment> (y/n) "
            , false);
            if (!$questioner->ask($input, $output, $question)) {
                $output->writeln('<error>Cancelled</error>');
                return;
            }
            mkdir($destFolder, 0777, true);
        }

        // Collect files
        $files = [];
        $finder = new Finder();
        $finder->files()->in($source);
        $destinationCounts = [];
        /** @var SplFileInfo $file */
        foreach ($finder as $file) {
            $data = [];
            $data['source'] = $path = $file->getRealPath();
            $data['size'] = filesize($path);
            $data['time'] = filemtime($path);
            list($name, $path) = $this->getNameAndDestinationPath($data['time'], $destFolder);
            $data['collision'] = 'no';
            if (file_exists($path)){
                $data['collision'] = '<error>Destination file already exist</error>';
            }
            if (array_key_exists($path, $destinationCounts)) {
                $data['collision'] = "<error>Duplicated filename</error>";
            }
            if ($autoFix){
                while(file_exists($path) || array_key_exists($path, $destinationCounts)){
                    $data['time'] += 1;
                    list($name, $path) = $this->getNameAndDestinationPath($data['time'], $destFolder);
                    $data['collision'] = '<info>fixed</info>';
                }
            }
            $destinationCounts[$path] = array_key_exists($path, $destinationCounts) ?
                $destinationCounts[$path] + 1 :
                0
            ;
            $data['name'] = $name;
            $data['destination'] = $path;
            $files[] = $data;
        }

        // Recap
        $table = new \Symfony\Component\Console\Helper\Table($output);
        $table->setHeaders(array('Source file', 'Size', 'Destination', 'Collision'));
        $table->setRows(array_map(function($row) use ($source, $formatter){
            return [
                str_replace($source, '', $row['source']),
                $this->toMo($row['size']),
                $row['name'],
                $row['collision']
            ];
        }, $files));
        $table->render();

        // Fail due to collision
        $collisonCounts = array_count_values(array_filter(array_column($files, 'collision'), function($value){
            return ! in_array($value, ['no', '<info>fixed</info>']);
        }));
        if (count($collisonCounts) > 0) {
            throw new RuntimeException("Collision expected, please fix destination before running the compression");
        }

        // Confirmation
        $question = new ConfirmationQuestion('Continue with this action? (y/n) ', false);
        if (!$questioner->ask($input, $output, $question)) {
            return;
        }

        // Compression
        $totalSaved = 0;
        $preset = $input->getOption("preset");
        foreach($files as $pos => $file) {
            $cmd = "HandBrakeCLI -i \"{$file['source']}\" -o \"{$file['destination']}\" -Z \"$preset\"";
            $output->writeln("Command: <comment>$cmd</comment>");
            $process = new Process($cmd);
            try {
                $process->mustRun();
                if ($process->getExitCode() == 0){
                    touch($file['destination'], $file['time']);
                    $newSize = filesize($file['destination']);
                    $saved = $file['size'] - $newSize;
                    $output->writeln("<info>Encoding success</info> ".$this->toMo($saved).' saved');
                    $totalSaved += $saved;
                }
            } catch (Exception $e) {
                $output->writeln("<error>{$e->getMessage()}</error>");
            }
        }

        // Final recap
        $output->writeln($formatter->formatBlock(
            count($files) . " videos compressed, total saved: ".$this->toMo($totalSaved), 'info'
        ));

    }

    protected function toMo($size){
        return round($size/1024/1024, 2) .' Mo';
    }

}

$application = new Application();
$application->setName('HandBrakeCLI-batch');
$application->setVersion('0.0.2');
$application->add(new CompressCommand());
$application->run();
